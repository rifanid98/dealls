// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	core "dealls/core"
	entity "dealls/core/v1/entity"

	mock "github.com/stretchr/testify/mock"
)

// ActionRepository is an autogenerated mock type for the ActionRepository type
type ActionRepository struct {
	mock.Mock
}

// FindActionByTargetId provides a mock function with given fields: ic, targetId
func (_m *ActionRepository) FindActionByTargetId(ic *core.InternalContext, targetId string) (*entity.Action, *core.CustomError) {
	ret := _m.Called(ic, targetId)

	var r0 *entity.Action
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string) (*entity.Action, *core.CustomError)); ok {
		return rf(ic, targetId)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, string) *entity.Action); ok {
		r0 = rf(ic, targetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, string) *core.CustomError); ok {
		r1 = rf(ic, targetId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// InsertAction provides a mock function with given fields: ic, _a1
func (_m *ActionRepository) InsertAction(ic *core.InternalContext, _a1 *entity.Action) (*entity.Action, *core.CustomError) {
	ret := _m.Called(ic, _a1)

	var r0 *entity.Action
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, *entity.Action) (*entity.Action, *core.CustomError)); ok {
		return rf(ic, _a1)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, *entity.Action) *entity.Action); ok {
		r0 = rf(ic, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, *entity.Action) *core.CustomError); ok {
		r1 = rf(ic, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// UpdateAction provides a mock function with given fields: ic, _a1
func (_m *ActionRepository) UpdateAction(ic *core.InternalContext, _a1 *entity.Action) (*entity.Action, *core.CustomError) {
	ret := _m.Called(ic, _a1)

	var r0 *entity.Action
	var r1 *core.CustomError
	if rf, ok := ret.Get(0).(func(*core.InternalContext, *entity.Action) (*entity.Action, *core.CustomError)); ok {
		return rf(ic, _a1)
	}
	if rf, ok := ret.Get(0).(func(*core.InternalContext, *entity.Action) *entity.Action); ok {
		r0 = rf(ic, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Action)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.InternalContext, *entity.Action) *core.CustomError); ok {
		r1 = rf(ic, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.CustomError)
		}
	}

	return r0, r1
}

// NewActionRepository creates a new instance of ActionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActionRepository {
	mock := &ActionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
