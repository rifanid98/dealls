// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	gcp "dealls/infrastructure/v1/broker/gcp"

	mock "github.com/stretchr/testify/mock"

	pubsub "cloud.google.com/go/pubsub"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateSubscription provides a mock function with given fields: ctx, id, cfg
func (_m *Client) CreateSubscription(ctx context.Context, id string, cfg pubsub.SubscriptionConfig) (gcp.Subscription, error) {
	ret := _m.Called(ctx, id, cfg)

	var r0 gcp.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pubsub.SubscriptionConfig) (gcp.Subscription, error)); ok {
		return rf(ctx, id, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, pubsub.SubscriptionConfig) gcp.Subscription); ok {
		r0 = rf(ctx, id, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gcp.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, pubsub.SubscriptionConfig) error); ok {
		r1 = rf(ctx, id, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTopic provides a mock function with given fields: ctx, topicID
func (_m *Client) CreateTopic(ctx context.Context, topicID string) (gcp.Topic, error) {
	ret := _m.Called(ctx, topicID)

	var r0 gcp.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gcp.Topic, error)); ok {
		return rf(ctx, topicID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gcp.Topic); ok {
		r0 = rf(ctx, topicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gcp.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, topicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTopicWithConfig provides a mock function with given fields: ctx, topicID, tc
func (_m *Client) CreateTopicWithConfig(ctx context.Context, topicID string, tc *pubsub.TopicConfig) (gcp.Topic, error) {
	ret := _m.Called(ctx, topicID, tc)

	var r0 gcp.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *pubsub.TopicConfig) (gcp.Topic, error)); ok {
		return rf(ctx, topicID, tc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *pubsub.TopicConfig) gcp.Topic); ok {
		r0 = rf(ctx, topicID, tc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gcp.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *pubsub.TopicConfig) error); ok {
		r1 = rf(ctx, topicID, tc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachSubscription provides a mock function with given fields: ctx, sub
func (_m *Client) DetachSubscription(ctx context.Context, sub string) (*pubsub.DetachSubscriptionResult, error) {
	ret := _m.Called(ctx, sub)

	var r0 *pubsub.DetachSubscriptionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pubsub.DetachSubscriptionResult, error)); ok {
		return rf(ctx, sub)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pubsub.DetachSubscriptionResult); ok {
		r0 = rf(ctx, sub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.DetachSubscriptionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscription provides a mock function with given fields: id
func (_m *Client) Subscription(id string) gcp.Subscription {
	ret := _m.Called(id)

	var r0 gcp.Subscription
	if rf, ok := ret.Get(0).(func(string) gcp.Subscription); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gcp.Subscription)
		}
	}

	return r0
}

// SubscriptionInProject provides a mock function with given fields: id, projectID
func (_m *Client) SubscriptionInProject(id string, projectID string) gcp.Subscription {
	ret := _m.Called(id, projectID)

	var r0 gcp.Subscription
	if rf, ok := ret.Get(0).(func(string, string) gcp.Subscription); ok {
		r0 = rf(id, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gcp.Subscription)
		}
	}

	return r0
}

// Subscriptions provides a mock function with given fields: ctx
func (_m *Client) Subscriptions(ctx context.Context) *pubsub.SubscriptionIterator {
	ret := _m.Called(ctx)

	var r0 *pubsub.SubscriptionIterator
	if rf, ok := ret.Get(0).(func(context.Context) *pubsub.SubscriptionIterator); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.SubscriptionIterator)
		}
	}

	return r0
}

// Topic provides a mock function with given fields: id
func (_m *Client) Topic(id string) gcp.Topic {
	ret := _m.Called(id)

	var r0 gcp.Topic
	if rf, ok := ret.Get(0).(func(string) gcp.Topic); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gcp.Topic)
		}
	}

	return r0
}

// TopicInProject provides a mock function with given fields: id, projectID
func (_m *Client) TopicInProject(id string, projectID string) gcp.Topic {
	ret := _m.Called(id, projectID)

	var r0 gcp.Topic
	if rf, ok := ret.Get(0).(func(string, string) gcp.Topic); ok {
		r0 = rf(id, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gcp.Topic)
		}
	}

	return r0
}

// Topics provides a mock function with given fields: ctx
func (_m *Client) Topics(ctx context.Context) *pubsub.TopicIterator {
	ret := _m.Called(ctx)

	var r0 *pubsub.TopicIterator
	if rf, ok := ret.Get(0).(func(context.Context) *pubsub.TopicIterator); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.TopicIterator)
		}
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
